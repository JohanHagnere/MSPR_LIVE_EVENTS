{% extends 'base.html.twig' %} {% block title %}Carte du festival{% endblock %}
{% block extra_stylesheets %}
<link rel="stylesheet" href="{{ asset('css/map.css') }}" /> {% endblock %} {%
block body %}

<div id="map_festival"></div>
<div id="searchbar">
  <input type="text" id="search-input" placeholder="Rechercher..." />
  <button type="button" id="search-button" title="Rechercher">
    <i class="fa-solid fa-magnifying-glass"></i>
  </button>
  <button type="button" id="search-filters" title="Filtres">
    <i class="fa-solid fa-filter"></i>
  </button>
</div>
<div id="category-box"></div>

<script>
  const markers = JSON.parse("{{ markers | e('js') }}");
  const categories = JSON.parse("{{ categories | e('js') }}");
  const festivalLocation = JSON.parse("{{ festivalLocation | e('js') }}");
  function initMap() {
    const festival = {
      lat: festivalLocation.latitude,
      lng: festivalLocation.longitude,
    };

    // Création de la carte
    const map = new google.maps.Map(document.getElementById("map_festival"), {
      zoom: 17,
      center: festival,
      styles: [
        {
          featureType: "poi", // Points of interest
          stylers: [{ visibility: "off" }], // les masquer
        },
        {
          featureType: "transit", // Transports en commun
          stylers: [{ visibility: "off" }], // les masquer
        },
      ],
      fullscreenControl: false,
      mapTypeControl: false,
      streetViewControl: false,
    });

    const festivalBounds = festivalLocation.bounds;
    const festivalZone = new google.maps.Polygon({
      strokeColor: "grey",
      strokeOpacity: 0.8,
      strokeWeight: 3,
      fillColor: "grey",
      fillOpacity: 0.15,
      map,
      paths: festivalBounds,
    });

    festivalZone.setMap(map);

    // Récupération de la position de l'utilisateur
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        function (position) {
          const userLatLng = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };

          // Ajout du marqueur pour la position de l'utilisateur
          const userMarker = new google.maps.Marker({
            position: userLatLng,
            map,
            title: "Votre position",
            icon: {
              scaledSize: new google.maps.Size(38, 38),
            },
          });

          // Centrage de la carte sur la position de l'utilisateur
          map.setCenter(userLatLng);
        },
        function (error) {
          console.error("Erreur de géolocalisation :", error);
        }
      );
    } else {
      console.error(
        "La géolocalisation n'est pas prise en charge par votre navigateur."
      );
    }

    // Ajout des marqueurs du festival
    for (var i = 0; i < markers.length; i++) {
      const marker = new google.maps.Marker({
        position: { lat: markers[i].latitude, lng: markers[i].longitude },
        map: map,
        title: markers[i].name,
        icon: {
          url: markers[i].img,
          scaledSize: new google.maps.Size(28, 28),
        },
        category: markers[i].category,
        img: markers[i].img,
      });
      const description = markers[i].description || "";
      const contentString = `<div class="info-window">
        <div class="info-window-title"> 
          ${markers[i].name}
          </div>
        <div class="info-window-content">${description}
        </div>
        </div>`;
      const infoWindow = new google.maps.InfoWindow({
        content: contentString,
      });
      marker.addListener("click", () => {
        infoWindow.open(map, marker);
      });
      // Mettez à jour le tableau `markers` avec les nouveaux marqueurs créés
      markers[i] = marker;
    }
    
    
    for (var i = 0; i < categories.length; i++) {
      let categoryUppercase = capitalizeFirstLetter(markers[i].category);

      document.getElementById(
        "category-box"
      ).innerHTML += `<div class='categories-box'>${categoryUppercase}<span><img src="${markers[i].img}" alt="${markers[i].title}"></span></div>`;
    }

    function capitalizeFirstLetter(word) {
      const firstLetter = word.charAt(0);
      const firstLetterCap = firstLetter.toUpperCase();
      const remainingLetters = word.slice(1);
      return firstLetterCap + remainingLetters;
    }

    function searchMarkers() {
      // Récupérer la requête de recherche
      const query = document.getElementById("search-input").value.toLowerCase();

      // Parcourir les marqueurs
      for (var i = 0; i < markers.length; i++) {
        const marker = markers[i];

        // Vérifier si le nom du marqueur correspond à la requête
        if (
          marker.title.toLowerCase().includes(query) ||
          marker.category.toLowerCase().includes(query)
        ) {
          // Afficher le marqueur correspondant
          marker.setMap(map);
        } else {
          // Masquer les marqueurs qui ne correspondent pas
          marker.setMap(null);
        }
      }
    }

    function searchFilters() {
      console.log("filtrer");
      document.getElementById("category-box").classList.toggle("visible");
    }

    // Associer la fonction de recherche au bouton de recherche
    document
      .getElementById("search-input")
      .addEventListener("input", searchMarkers);
    document
      .getElementById("search-filters")
      .addEventListener("click", searchFilters);
    const categoriesBox = document.getElementsByClassName("categories-box");
    for (let index = 0; index < categoriesBox.length; index++) {
      const element = categoriesBox[index];
      element.addEventListener("click", (e) => {
        document.getElementById("search-input").value = e.target.outerText;
        searchMarkers();
      });
    }
  }

  window.initMap = initMap;
</script>
<script
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDfh6E4gClmwOAfjx9hD9WrzmRWNWff1ko&callback=initMap&v=weekly"
  defer
></script>
{% endblock %}
